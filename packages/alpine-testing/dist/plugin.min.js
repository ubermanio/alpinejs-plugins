(()=>{var o={TEST_PASSED:"alpine:test:passed",TEST_FAILED:"alpine:test:failed",ALL_TESTS_RAN:"alpine:test:finished"},E=r=>{let l=[];r.directive("test",(t,{modifiers:i,expression:a},{Alpine:s})=>{let e=t;navigator.userAgent.includes("Node.js")||navigator.userAgent.includes("jsdom")?l.push({element:e,test:a,modifiers:i}):e.removeAttribute("x-test")}),document.addEventListener("alpine:initialized",()=>{r.nextTick(()=>{let t=0,i=0,a=Date.now();l.forEach(({element:s,test:e,modifiers:m})=>{let n=r.evaluate(s,e);if(!Array.isArray(n))throw new Error("Invalid x-test directive");if(n.length<=1)throw new Error("Invalid x-test directive: either missing message or tests");if(typeof n[0]!="string")throw new Error("Invalid x-test directive: first element in array must be the test message of type script");let[d,...c]=n;if(c.every(Boolean))i++,document.dispatchEvent(new CustomEvent(o.TEST_PASSED,{detail:{element:s,message:d,test:e}}));else if(t++,document.dispatchEvent(new CustomEvent(o.TEST_FAILED,{detail:{element:s,message:d,test:e}})),m?.includes("throw"))throw new Error("Test failed")}),document.dispatchEvent(new CustomEvent(o.ALL_TESTS_RAN,{detail:{failed:t,passedTests:i,duration:Date.now()-a}}))})})},p=E;document.addEventListener("alpine:init",()=>{window.Alpine.plugin(p)});})();
